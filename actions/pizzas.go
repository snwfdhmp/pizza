package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
	"github.com/snwfdhmp/pizza/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Pizza)
// DB Table: Plural (pizzas)
// Resource: Plural (Pizzas)
// Path: Plural (/pizzas)
// View Template Folder: Plural (/templates/pizzas/)

// PizzasResource is the resource for the pizza model
type PizzasResource struct {
	buffalo.Resource
}

// List gets all Pizzas. This function is mapped to the path
// GET /pizzas
func (v PizzasResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	pizzas := &models.Pizzas{}
	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())
	// You can order your list here. Just change
	err := q.All(pizzas)
	// to:
	// err := q.Order("created_at desc").All(pizzas)
	if err != nil {
		return errors.WithStack(err)
	}
	// Make Pizzas available inside the html template
	c.Set("pizzas", pizzas)
	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)
	return c.Render(200, r.HTML("pizzas/index.html"))
}

// Show gets the data for one Pizza. This function is mapped to
// the path GET /pizzas/{pizza_id}
func (v PizzasResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Pizza
	pizza := &models.Pizza{}
	// To find the Pizza the parameter pizza_id is used.
	err := tx.Find(pizza, c.Param("pizza_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Make pizza available inside the html template
	c.Set("pizza", pizza)
	return c.Render(200, r.HTML("pizzas/show.html"))
}

// New renders the form for creating a new Pizza.
// This function is mapped to the path GET /pizzas/new
func (v PizzasResource) New(c buffalo.Context) error {
	// Make pizza available inside the html template
	c.Set("pizza", &models.Pizza{})
	return c.Render(200, r.HTML("pizzas/new.html"))
}

// Create adds a Pizza to the DB. This function is mapped to the
// path POST /pizzas
func (v PizzasResource) Create(c buffalo.Context) error {
	// Allocate an empty Pizza
	pizza := &models.Pizza{}
	// Bind pizza to the html form elements
	err := c.Bind(pizza)
	if err != nil {
		return errors.WithStack(err)
	}
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(pizza)
	if err != nil {
		return errors.WithStack(err)
	}
	if verrs.HasAny() {
		// Make pizza available inside the html template
		c.Set("pizza", pizza)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("pizzas/new.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Pizza was created successfully")
	// and redirect to the pizzas index page
	return c.Redirect(302, "/pizzas/%s", pizza.ID)
}

// Edit renders a edit form for a pizza. This function is
// mapped to the path GET /pizzas/{pizza_id}/edit
func (v PizzasResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Pizza
	pizza := &models.Pizza{}
	err := tx.Find(pizza, c.Param("pizza_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Make pizza available inside the html template
	c.Set("pizza", pizza)
	return c.Render(200, r.HTML("pizzas/edit.html"))
}

// Update changes a pizza in the DB. This function is mapped to
// the path PUT /pizzas/{pizza_id}
func (v PizzasResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Pizza
	pizza := &models.Pizza{}
	err := tx.Find(pizza, c.Param("pizza_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Bind Pizza to the html form elements
	err = c.Bind(pizza)
	if err != nil {
		return errors.WithStack(err)
	}
	verrs, err := tx.ValidateAndUpdate(pizza)
	if err != nil {
		return errors.WithStack(err)
	}
	if verrs.HasAny() {
		// Make pizza available inside the html template
		c.Set("pizza", pizza)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("pizzas/edit.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Pizza was updated successfully")
	// and redirect to the pizzas index page
	return c.Redirect(302, "/pizzas/%s", pizza.ID)
}

// Destroy deletes a pizza from the DB. This function is mapped
// to the path DELETE /pizzas/{pizza_id}
func (v PizzasResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Pizza
	pizza := &models.Pizza{}
	// To find the Pizza the parameter pizza_id is used.
	err := tx.Find(pizza, c.Param("pizza_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	err = tx.Destroy(pizza)
	if err != nil {
		return errors.WithStack(err)
	}
	// If there are no errors set a flash message
	c.Flash().Add("success", "Pizza was destroyed successfully")
	// Redirect to the pizzas index page
	return c.Redirect(302, "/pizzas")
}
